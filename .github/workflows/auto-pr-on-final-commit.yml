name: Auto PR on Final Commit

on:
  push:
    branches-ignore:
      - main
      - staging
      - development

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up SSH for GitHub
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Set Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract branch name, base branch, and JIRA key
        id: branchinfo
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "üîé Current branch: $BRANCH_NAME"
          echo "üìù Commit message: $COMMIT_MSG"

          # Expected format: base_branch, JIRA-123, final commit _anything
          BASE_BRANCH=$(echo "$COMMIT_MSG" | cut -d',' -f1 | xargs)
          JIRA_KEY=$(echo "$COMMIT_MSG" | cut -d',' -f2 | xargs)
          TRIGGER_KEYWORD=$(echo "$COMMIT_MSG" | cut -d',' -f3 | grep -i "final" | xargs)

          if [[ -z "$BASE_BRANCH" || -z "$JIRA_KEY" || -z "$TRIGGER_KEYWORD" ]]; then
            echo "‚ÑπÔ∏è Commit message format not recognized or missing required fields."
            echo "Expected format: base_branch, JIRA-123, final commit"
            echo "Current commit message: $COMMIT_MSG"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "‚úÖ Extracted base branch: $BASE_BRANCH"
          echo "‚úÖ Extracted JIRA Key: $JIRA_KEY"
          echo "branch=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "base_branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"
          echo "jira_key=$JIRA_KEY" >> "$GITHUB_OUTPUT"
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: Install GitHub CLI
        if: steps.branchinfo.outputs.skip != 'true'
        run: |
          sudo apt update
          sudo apt install -y gh jq
          gh --version

      - name: Authenticate GitHub CLI
        if: steps.branchinfo.outputs.skip != 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create Pull Request
        if: steps.branchinfo.outputs.skip != 'true'
        id: create_pr
        env:
          SOURCE_BRANCH: ${{ steps.branchinfo.outputs.branch }}
          TARGET_BASE_BRANCH: ${{ steps.branchinfo.outputs.base_branch }}
        run: |
          echo "üìå Creating PR from '$SOURCE_BRANCH' to '$TARGET_BASE_BRANCH'..."

          # Check if PR already exists
          PR_LIST=$(gh pr list --head "$SOURCE_BRANCH" --base "$TARGET_BASE_BRANCH" --state open --json number 2>/dev/null)

          if echo "$PR_LIST" | jq -e '.[0]' >/dev/null 2>&1; then
            EXISTING_PR_NUMBER=$(echo "$PR_LIST" | jq -r '.[0].number')
            echo "‚ö†Ô∏è PR already exists: #$EXISTING_PR_NUMBER"
            echo "pr_url=https://github.com/${GITHUB_REPOSITORY}/pull/$EXISTING_PR_NUMBER" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Create new PR
          PR_URL=$(gh pr create \
            --title "Auto PR: $SOURCE_BRANCH to $TARGET_BASE_BRANCH" \
            --body "### ü§ñ Automated Pull Request\n\n- **Source Branch:** \`$SOURCE_BRANCH\`\n- **Target Branch:** \`$TARGET_BASE_BRANCH\`\n\nTriggered by a commit containing 'final commit'." \
            --base "$TARGET_BASE_BRANCH" \
            --head "$SOURCE_BRANCH" \
            | grep -o 'https://github.com/[^ ]*')

          echo "‚úÖ PR created: $PR_URL"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"

      - name: Print PR URL
        if: success() && steps.branchinfo.outputs.skip != 'true'
        run: |
          echo "üîó Pull Request URL: ${{ steps.create_pr.outputs.pr_url }}"

      - name: Transition JIRA issue to "Development Done"
        if: success() && steps.branchinfo.outputs.skip != 'true'
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_KEY: ${{ steps.branchinfo.outputs.jira_key }}
        run: |
          echo "üîÅ Transitioning JIRA issue $JIRA_KEY to 'Development Done'..."
          echo "Jira account ':' $JIRA_EMAIL "
          curl --request POST \
            --url "$JIRA_URL/rest/api/3/issue/$JIRA_KEY/transitions" \
            --user "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            --header 'Content-Type: application/json' \
            --data '{
              "transition": {
                "id": "31"
              }
            }'
