name: Auto PR on Final Commit

on:
  push:
    branches-ignore:
      - main
      - staging
      - development
      # Add this permissions block if you encounter permission errors
permissions:
  pull-requests: write
  contents: write # Needed for checkout actions if you were doing commits, but good to have if you need to fetch info

jobs:
  auto-create-pr:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'final commit')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name and determine base branch
        id: branchinfo
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Current branch: $BRANCH_NAME"

          BASE_BRANCH="development"
          if [[ "$BRANCH_NAME" == dev-* ]]; then
            BASE_BRANCH="development"
          elif [[ "$BRANCH_NAME" == staging-* ]]; then
            BASE_BRANCH="staging"
          elif [[ "$BRANCH_NAME" == main-* ]]; then
            BASE_BRANCH="main"
          fi

          echo "Determined base branch: $BASE_BRANCH"
          echo "branch=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "base_branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Install GitHub CLI (Latest Stable Version)
        run: |
          # **IMPORTANT**: Check the GitHub CLI releases page for the absolute latest stable version and its .deb URL.
          # As of July 2025, v2.50.0 is an example of a recent version that supports --json and --fill-* flags.
          # Adjust the version number (e.g., v2.50.0) in the URL below if a newer stable release is available.
          GH_CLI_VERSION="2.50.0" # <--- UPDATE THIS TO THE LATEST STABLE VERSION
          GH_CLI_DEB_URL="https://github.com/cli/cli/releases/download/v${GH_CLI_VERSION}/gh_${GH_CLI_VERSION}_linux_amd64.deb"

          echo "Downloading GitHub CLI v${GH_CLI_VERSION} from: ${GH_CLI_DEB_URL}"
          curl -fsSL "$GH_CLI_DEB_URL" -o gh.deb
          sudo dpkg -i gh.deb
          gh --version # Verify installation

      - name: Create Pull Request
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          SOURCE_BRANCH: ${{ steps.branchinfo.outputs.branch }}
          TARGET_BASE_BRANCH: ${{ steps.branchinfo.outputs.base_branch }}
        run: |
          echo "📌 Creating PR from '$SOURCE_BRANCH' to '$TARGET_BASE_BRANCH'..."

          # Check for existing PR
          PR_LIST=$(gh pr list --head "$SOURCE_BRANCH" --base "$TARGET_BASE_BRANCH" --state open --json number 2>/dev/null)

          if echo "$PR_LIST" | jq empty 2>/dev/null; then
            EXISTING_PR_NUMBER=$(echo "$PR_LIST" | jq -r '.[0].number')
          else
            echo "⚠️ Warning: PR list not valid JSON or empty"
            EXISTING_PR_NUMBER=""
          fi

          if [[ -n "$EXISTING_PR_NUMBER" && "$EXISTING_PR_NUMBER" != "null" ]]; then
            echo "⚠️ PR already exists: #$EXISTING_PR_NUMBER"
            echo "pr_url=https://github.com/${GITHUB_REPOSITORY}/pull/$EXISTING_PR_NUMBER" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Create new PR
          PR_OUTPUT=$(gh pr create \
            --title "Auto PR: $SOURCE_BRANCH to $TARGET_BASE_BRANCH" \
            --body "### Automated Pull Request\n\nThis PR was generated by the 'Auto PR on Final Commit' workflow.\n\n- **Source Branch:** \`$SOURCE_BRANCH\`\n- **Target Branch:** \`$TARGET_BASE_BRANCH\`" \
            --base "$TARGET_BASE_BRANCH" \
            --head "$SOURCE_BRANCH" \
            --label "auto-pr" \
          )

          PR_URL=$(echo "$PR_OUTPUT" | grep -o 'https://github.com/[^ ]*')
          echo "✅ PR created: $PR_URL"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"

      - name: Print PR URL
        if: success() # Only run this step if the previous 'create_pr' step was successful
        run: |
          echo "🔗 PR: ${{ steps.create_pr.outputs.pr_url }}"
