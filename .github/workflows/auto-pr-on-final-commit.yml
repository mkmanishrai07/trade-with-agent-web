name: Auto PR on Final Commit

on:
  push:
    branches-ignore:
      - main
      - staging
      - development

jobs:
  auto-create-pr:
    runs-on: ubuntu-latest
    # Check if the commit message contains 'final commit' (case-sensitive)
    if: contains(github.event.head_commit.message, 'final commit')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name and determine base branch
        id: branchinfo
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Current branch: $BRANCH_NAME"

          # Determine the base branch based on naming conventions
          BASE_BRANCH="development" # Default base branch
          if [[ "$BRANCH_NAME" == dev-* ]]; then
            BASE_BRANCH="development"
          elif [[ "$BRANCH_NAME" == staging-* ]]; then
            BASE_BRANCH="staging"
          elif [[ "$BRANCH_NAME" == main-* ]]; then
            BASE_BRANCH="main"
          fi

          echo "Determined base branch: $BASE_BRANCH"
          echo "branch=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "base_branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Install GitHub CLI (fixed version)
        run: |
          # Download and install gh CLI v2.49.0
          curl -fsSL https://github.com/cli/cli/releases/download/v2.49.0/gh_2.49.0_linux_amd64.deb -o gh.deb
          sudo dpkg -i gh.deb
          gh --version # Verify installation

      - name: Create Pull Request
        id: create_pr
        env:
          # GH_TOKEN is automatically used by gh CLI for authentication
          GH_TOKEN: ${{ github.token }}
          SOURCE_BRANCH: ${{ steps.branchinfo.outputs.branch }}
          TARGET_BASE_BRANCH: ${{ steps.branchinfo.outputs.base_branch }}
        run: |
          echo "📌 Creating PR from '$SOURCE_BRANCH' to '$TARGET_BASE_BRANCH'..."

          # Check if a PR already exists from SOURCE_BRANCH to TARGET_BASE_BRANCH
          EXISTING_PR_NUMBER=$(gh pr list --head "$SOURCE_BRANCH" --base "$TARGET_BASE_BRANCH" --state open --json number --jq '.[0].number')
          
          if [[ -n "$EXISTING_PR_NUMBER" ]]; then
            echo "⚠️ PR already exists: #$EXISTING_PR_NUMBER"
            echo "pr_url=https://github.com/${GITHUB_REPOSITORY}/pull/$EXISTING_PR_NUMBER" >> "$GITHUB_OUTPUT"
            exit 0 # Exit successfully if PR already exists
          fi

          # Create the new Pull Request
          PR_OUTPUT=$(gh pr create \
            --title "Auto PR: $SOURCE_BRANCH to $TARGET_BASE_BRANCH" \
            --body "### Automated Pull Request\n\nThis PR was automatically generated by the 'Auto PR on Final Commit' workflow.\n\n- **Source Branch:** \`$SOURCE_BRANCH\`\n- **Target Branch:** \`$TARGET_BASE_BRANCH\`\n\nTriggered by a commit containing 'final commit'.\n\n---" \
            --base "$TARGET_BASE_BRANCH" \
            --head "$SOURCE_BRANCH" \
            --fill-reviewer --fill-assignee --fill-project --fill-milestone --fill-label \
            --json url,number # Request URL and number for output
          )
          
          PR_URL=$(echo "$PR_OUTPUT" | jq -r '.url')
          PR_NUMBER=$(echo "$PR_OUTPUT" | jq -r '.number')

          echo "✅ PR created: $PR_URL"
          echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Print PR URL
        # Only run this step if the previous step (create_pr) was successful
        if: success()
        run: |
          echo "🔗 PR: ${{ steps.create_pr.outputs.pr_url }}"